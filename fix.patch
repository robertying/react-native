From f435730c68424f77283b2896d291a05c8fc574cc Mon Sep 17 00:00:00 2001
From: Rui Ying <git@ruiying.io>
Date: Mon, 24 Oct 2022 02:22:54 -0700
Subject: [PATCH 1/2] Allow non-ascii header values on Android & add utf-8
 fallback

---
 Libraries/Network/FormData.js                 |  4 ++-
 Libraries/Network/__tests__/FormData-test.js  | 24 +++++++++++++++++-
 .../react/modules/network/HeaderUtil.java     | 13 ----------
 .../modules/network/NetworkingModule.java     |  4 +--
 .../react/modules/network/HeaderUtilTest.java | 25 -------------------
 .../modules/network/NetworkingModuleTest.java |  4 +--
 6 files changed, 30 insertions(+), 44 deletions(-)

diff --git a/Libraries/Network/FormData.js b/Libraries/Network/FormData.js
index d1ec8116ad41b..91735c6b033b1 100644
--- a/Libraries/Network/FormData.js
+++ b/Libraries/Network/FormData.js
@@ -82,7 +82,9 @@ class FormData {
       // content type (cf. web Blob interface.)
       if (typeof value === 'object' && !Array.isArray(value) && value) {
         if (typeof value.name === 'string') {
-          headers['content-disposition'] += '; filename="' + value.name + '"';
+          headers['content-disposition'] += `; filename="${
+            value.name
+          }"; filename*=utf-8''${encodeURI(value.name)}`;
         }
         if (typeof value.type === 'string') {
           headers['content-type'] = value.type;
diff --git a/Libraries/Network/__tests__/FormData-test.js b/Libraries/Network/__tests__/FormData-test.js
index b708a04263d08..ee741afb7c983 100644
--- a/Libraries/Network/__tests__/FormData-test.js
+++ b/Libraries/Network/__tests__/FormData-test.js
@@ -48,7 +48,29 @@ describe('FormData', function () {
       type: 'image/jpeg',
       name: 'photo.jpg',
       headers: {
-        'content-disposition': 'form-data; name="photo"; filename="photo.jpg"',
+        'content-disposition':
+          'form-data; name="photo"; filename="photo.jpg"; filename*=utf-8\'\'photo.jpg',
+        'content-type': 'image/jpeg',
+      },
+      fieldName: 'photo',
+    };
+    expect(formData.getParts()[0]).toMatchObject(expectedPart);
+  });
+
+  it('should return blob with the correct utf-8 handling', function () {
+    formData.append('photo', {
+      uri: 'arbitrary/path',
+      type: 'image/jpeg',
+      name: '测试photo.jpg',
+    });
+
+    const expectedPart = {
+      uri: 'arbitrary/path',
+      type: 'image/jpeg',
+      name: '测试photo.jpg',
+      headers: {
+        'content-disposition':
+          'form-data; name="photo"; filename="测试photo.jpg"; filename*=utf-8\'\'%E6%B5%8B%E8%AF%95photo.jpg',
         'content-type': 'image/jpeg',
       },
       fieldName: 'photo',
diff --git a/ReactAndroid/src/main/java/com/facebook/react/modules/network/HeaderUtil.java b/ReactAndroid/src/main/java/com/facebook/react/modules/network/HeaderUtil.java
index 07485deffca4c..d74687c2f0f34 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/modules/network/HeaderUtil.java
+++ b/ReactAndroid/src/main/java/com/facebook/react/modules/network/HeaderUtil.java
@@ -29,17 +29,4 @@ public static String stripHeaderName(String name) {
     return modified ? builder.toString() : name;
   }

-  public static String stripHeaderValue(String value) {
-    StringBuilder builder = new StringBuilder(value.length());
-    boolean modified = false;
-    for (int i = 0, length = value.length(); i < length; i++) {
-      char c = value.charAt(i);
-      if ((c > '\u001f' && c < '\u007f') || c == '\t') {
-        builder.append(c);
-      } else {
-        modified = true;
-      }
-    }
-    return modified ? builder.toString() : value;
-  }
 }
diff --git a/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java b/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
index f80b1c65618a6..4b4251d73e1ca 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
+++ b/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java
@@ -747,11 +747,11 @@ public void removeListeners(double count) {}
         return null;
       }
       String headerName = HeaderUtil.stripHeaderName(header.getString(0));
-      String headerValue = HeaderUtil.stripHeaderValue(header.getString(1));
+      String headerValue = header.getString(1);
       if (headerName == null || headerValue == null) {
         return null;
       }
-      headersBuilder.add(headerName, headerValue);
+      headersBuilder.addUnsafeNonAscii(headerName, headerValue);
     }
     if (headersBuilder.get(USER_AGENT_HEADER_NAME) == null && mDefaultUserAgent != null) {
       headersBuilder.add(USER_AGENT_HEADER_NAME, mDefaultUserAgent);
diff --git a/ReactAndroid/src/test/java/com/facebook/react/modules/network/HeaderUtilTest.java b/ReactAndroid/src/test/java/com/facebook/react/modules/network/HeaderUtilTest.java
index 35c17cfbc21e9..32f54ddc48d77 100644
--- a/ReactAndroid/src/test/java/com/facebook/react/modules/network/HeaderUtilTest.java
+++ b/ReactAndroid/src/test/java/com/facebook/react/modules/network/HeaderUtilTest.java
@@ -26,46 +26,21 @@ public void nameStripKeepsLetters() {
     assertEquals(ALPHABET_TEST, HeaderUtil.stripHeaderName(ALPHABET_TEST));
   }

-  @Test
-  public void valueStripKeepsLetters() {
-    assertEquals(ALPHABET_TEST, HeaderUtil.stripHeaderValue(ALPHABET_TEST));
-  }
-
   @Test
   public void nameStripKeepsNumbers() {
     assertEquals(NUMBERS_TEST, HeaderUtil.stripHeaderName(NUMBERS_TEST));
   }

-  @Test
-  public void valueStripKeepsNumbers() {
-    assertEquals(NUMBERS_TEST, HeaderUtil.stripHeaderValue(NUMBERS_TEST));
-  }
-
-  @Test
-  public void valueStripKeepsSpecials() {
-    assertEquals(SPECIALS_TEST, HeaderUtil.stripHeaderValue(SPECIALS_TEST));
-  }
-
   @Test
   public void nameStripKeepsSpecials() {
     assertEquals(SPECIALS_TEST, HeaderUtil.stripHeaderName(SPECIALS_TEST));
   }

-  @Test
-  public void valueStripKeepsTabs() {
-    assertEquals(TABULATION_TEST, HeaderUtil.stripHeaderValue(TABULATION_TEST));
-  }
-
   @Test
   public void nameStripDeletesTabs() {
     assertEquals(TABULATION_STRIP_EXPECTED, HeaderUtil.stripHeaderName(TABULATION_TEST));
   }

-  @Test
-  public void valueStripRemovesExtraSymbols() {
-    assertEquals(BANNED_TEST_EXPECTED, HeaderUtil.stripHeaderValue(VALUE_BANNED_SYMBOLS_TEST));
-  }
-
   @Test
   public void nameStripRemovesExtraSymbols() {
     assertEquals(BANNED_TEST_EXPECTED, HeaderUtil.stripHeaderName(NAME_BANNED_SYMBOLS_TEST));
diff --git a/ReactAndroid/src/test/java/com/facebook/react/modules/network/NetworkingModuleTest.java b/ReactAndroid/src/test/java/com/facebook/react/modules/network/NetworkingModuleTest.java
index 1e353f8f23e81..3dda2b62c7f9d 100644
--- a/ReactAndroid/src/test/java/com/facebook/react/modules/network/NetworkingModuleTest.java
+++ b/ReactAndroid/src/test/java/com/facebook/react/modules/network/NetworkingModuleTest.java
@@ -503,7 +503,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         JavaOnlyArray.from(
             Arrays.asList(
                 JavaOnlyArray.of("content-type", "image/jpg"),
-                JavaOnlyArray.of("content-disposition", "filename=photo.jpg"))));
+                JavaOnlyArray.of("content-disposition", 'filename="测试photo.jpg"; filename*=utf-8\'\'%E6%B5%8B%E8%AF%95photo.jpg'))));
     formData.pushMap(imageBodyPart);

     mNetworkingModule.sendRequest(
@@ -539,7 +539,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     assertThat(bodyHeaders.get(0).get("content-disposition")).isEqualTo("user");
     assertThat(bodyRequestBody.get(0).contentType()).isNull();
     assertThat(bodyRequestBody.get(0).contentLength()).isEqualTo("locale".getBytes().length);
-    assertThat(bodyHeaders.get(1).get("content-disposition")).isEqualTo("filename=photo.jpg");
+    assertThat(bodyHeaders.get(1).get("content-disposition")).isEqualTo('filename="测试photo.jpg"; filename*=utf-8\'\'%E6%B5%8B%E8%AF%95photo.jpg');
     assertThat(bodyRequestBody.get(1).contentType()).isEqualTo(MediaType.parse("image/jpg"));
     assertThat(bodyRequestBody.get(1).contentLength()).isEqualTo("imageUri".getBytes().length);
   }

From b5749b659910284e6895520542d6a5cbb20eb4fb Mon Sep 17 00:00:00 2001
From: Rui Ying <git@ruiying.io>
Date: Tue, 8 Nov 2022 12:15:16 -0800
Subject: [PATCH 2/2] Fix string escaping in Java

---
 .../facebook/react/modules/network/NetworkingModuleTest.java  | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/ReactAndroid/src/test/java/com/facebook/react/modules/network/NetworkingModuleTest.java b/ReactAndroid/src/test/java/com/facebook/react/modules/network/NetworkingModuleTest.java
index 3dda2b62c7f9d..d3c3fdcc6d592 100644
--- a/ReactAndroid/src/test/java/com/facebook/react/modules/network/NetworkingModuleTest.java
+++ b/ReactAndroid/src/test/java/com/facebook/react/modules/network/NetworkingModuleTest.java
@@ -503,7 +503,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         JavaOnlyArray.from(
             Arrays.asList(
                 JavaOnlyArray.of("content-type", "image/jpg"),
-                JavaOnlyArray.of("content-disposition", 'filename="测试photo.jpg"; filename*=utf-8\'\'%E6%B5%8B%E8%AF%95photo.jpg'))));
+                JavaOnlyArray.of("content-disposition", "filename=\"测试photo.jpg\"; filename*=utf-8''%E6%B5%8B%E8%AF%95photo.jpg"))));
     formData.pushMap(imageBodyPart);

     mNetworkingModule.sendRequest(
@@ -539,7 +539,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     assertThat(bodyHeaders.get(0).get("content-disposition")).isEqualTo("user");
     assertThat(bodyRequestBody.get(0).contentType()).isNull();
     assertThat(bodyRequestBody.get(0).contentLength()).isEqualTo("locale".getBytes().length);
-    assertThat(bodyHeaders.get(1).get("content-disposition")).isEqualTo('filename="测试photo.jpg"; filename*=utf-8\'\'%E6%B5%8B%E8%AF%95photo.jpg');
+    assertThat(bodyHeaders.get(1).get("content-disposition")).isEqualTo("filename=\"测试photo.jpg\"; filename*=utf-8''%E6%B5%8B%E8%AF%95photo.jpg");
     assertThat(bodyRequestBody.get(1).contentType()).isEqualTo(MediaType.parse("image/jpg"));
     assertThat(bodyRequestBody.get(1).contentLength()).isEqualTo("imageUri".getBytes().length);
   }
